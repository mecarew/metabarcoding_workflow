---
title: "Cross-check of MC excel checks with reproducible Appendix 2 code"
format: html
editor: source
editor_options: 
  chunk_output_type: console
---

MEL: I've removed a lot of past workings here, as the checks are looking pretty complete.  Having said that, there are a few new discrepancies resulting from 

```{r}
# all_MC_checks compiled in compilation_of_osf_files ## 4
all_MC_checks <- read.csv("~/uomShare/wergStaff/MelCarew/git-data/metabarcoding_workflow/asv_source_files/all_mc_checks.csv")
# your validated private library compiled in compilation_of_osf_files ## 3
priv_lib <- read.csv("~/uomShare/wergStaff/MelCarew/git-data/metabarcoding_workflow/asv_source_files/priv_lib_validated.csv")
tfill <- as.data.frame(readxl::read_excel("~/uomShare/wergStaff/ChrisW/temp/asv_library_corrected.xlsx"),
                       sheet = "tfill")
tfill <- tfill[tfill$aqu == 1,]
tfill_spp_bins <- as.data.frame(readxl::read_excel("~/uomShare/wergStaff/ChrisW/temp/asv_library_corrected.xlsx"),
                       sheet = "tfill_spp_bins")
load("~/uomShare/wergStaff/MelCarew/git-data/metabarcoding_workflow/asv_source_files/match_list_bin_uri_v5.rda")
bold_results <- read.csv("~/uomShare/wergStaff/MelCarew/git-data/metabarcoding_workflow/asv_source_files/match_bold_v5.csv")
priv_lib_spp <- as.data.frame(readxl::read_excel("~/uomShare/wergStaff/MelCarew/git-data/metabarcoding_workflow/asv_source_files/private_library_mc_validated.xlsx", sheet = "species"))
priv_lib_lt97 <- as.data.frame(readxl::read_excel("~/uomShare/wergStaff/MelCarew/git-data/metabarcoding_workflow/asv_source_files/private_library_mc_validated.xlsx", sheet = "higher_taxa"))

# tfill records without a BOLD match or without a match to your private library
asv_no_bold <- tfill$asv_code[!tfill$asv_code %in% unique(names(match_list_bin_uri))]  # length(asv_no_bold)  1535 asv_codes

# Records checked by Mel that do not have a >97% match with BOLD (and have been given different names by MC and CW)
check_no_bold <- all_MC_checks[all_MC_checks$asv_code %in% asv_no_bold,] #1534
check_no_bold$species <- tfill$species[match(check_no_bold$asv_code, tfill$asv_code)]
check_no_bold[is.na(check_no_bold)] <- ""  # for easier matching
check_no_bold <- dplyr::mutate(check_no_bold, 
                               max_sim_bold = tfill$max_sim_bold[match(check_no_bold$asv_code, tfill$asv_code)],
                               .after = bold_match)
check_no_bold <- dplyr::mutate(check_no_bold, species_old = tfill$species_old[match(check_no_bold$asv_code,tfill$asv_code)], .before = bold_match)
check_no_bold <- check_no_bold[check_no_bold$species != check_no_bold$checked_species_name,] # 38 records
# Identify the check_no_bold records that share a name with records that actually have a >=97% bold match
tfill_bold <-tfill[tfill$asv_code %in% unique(bold_results$asv_code[bold_results$similarity >= 97]),]  #17,046
check_no_bold_spp_in_bold <- check_no_bold[check_no_bold$species %in% unique(tfill_bold$species),]   #21
  # MEL: 21 records that are now called Notalina sp. B-ABV8023 (from the priv_lib_spp table)
  #      None of these 21 have bold matches in my tables, but your geneious search has linked them to ABV8023
  #      Are you sure about this? If so, I'm happy to go with it

check_no_bold <- check_no_bold[!check_no_bold$asv_code %in% check_no_bold_spp_in_bold$asv_code,] #17
check_no_bold$genious_similarity <- priv_lib_spp$geneious_similarity[match(check_no_bold$asv_code, priv_lib_spp$asv_code)]
for(i in which(is.na(check_no_bold$genious_similarity))){
  if(check_no_bold$asv_code[i] %in% priv_lib_lt97$asv_code)
  check_no_bold$genious_similarity[i] <- priv_lib_lt97$geneious_similarity[priv_lib_lt97$asv_code == check_no_bold$asv_code[i]]
}
#MEL: Here is some thoughts/questions on these remaining problems
  # MEL: I'm pretty sure my code has the 5 Empididae sp. MC-Co1 names right. Please check. This line might help
priv_lib_spp[priv_lib_spp$asv_code %in% check_no_bold$asv_code[check_no_bold$checked_species_name == "Empididae sp. MC-BC2"],]
  # MEL: The 5 Stempellina sp. MC-A records should be only identified to family according to priv_lib_lt97
priv_lib_lt97[priv_lib_lt97$asv_code %in% check_no_bold$asv_code[check_no_bold$bold_match == 93],]
  # but my logic in Appendix_2_clean_cw.qmd doesn't make the change because the max_p_identity of these records in tfill are >97
tfill[tfill$asv_code %in% check_no_bold$asv_code[check_no_bold$bold_match == 93],]
  # (You told me to only change max_p_identity to geneious_similarity if the latter was higher).  
#  See my questions about another example of the questions this logic raises at L1147 of Appendix_2_clean_cw.qmd
priv_lib_lt97[priv_lib_lt97$asv_code %in% check_no_bold$asv_code[check_no_bold$species == "Austroargiolestes spp."],]
tfill[tfill$asv_code %in% check_no_bold$asv_code[check_no_bold$species == "Austroargiolestes spp."],]
  # Same deal with the two Austroargiolestes spp records. 
# Perhaps the easiest solution here is to change all tfill details to priv_lib details, but I fear doing so might introduce other errors
# It would be good if you could describe a clear logic as to how to adjust identities and max_p_identity from the geneious results.

tfill[tfill$asv_code %in% check_no_bold$asv_code[check_no_bold$checked_species_name == "Notonemouridae"],]
# Pretty sure these two are right (enough), but bb9f84db19013052915d3b1ac559f11f doesn't seem to have a geneious match.
# Their max_p_identity of 90 seems to have done the job.

# After starting to comment on the next 2 + 1 records, I noticed that they have max_p_update = 1 
# because they came from your original max_p_update table, so I'm thinking your undocumented
# max_p_update values in that table are the problem. Correct?
tfill[tfill$asv_code %in% check_no_bold$asv_code[check_no_bold$species == "Ceratopogonidae sp. B-ACC9111"],]
# Your blank checked_species_name suggests that max_p_identity should be less than 97 (It's 99).  No geneious_similarity or a bold match for this one that I can fiind.
tfill[tfill$asv_code %in% check_no_bold$asv_code[check_no_bold$species == "Limnesia undulata"],]

check_with_bold <- all_MC_checks[!all_MC_checks$asv_code %in% asv_no_bold,]
# Exclude non_aqu/non_macros not checked by CW
check_with_bold <- check_with_bold[check_with_bold$asv_code %in% tfill$asv_code,]
check_with_bold$species <- tfill$species[match(check_with_bold$asv_code, tfill$asv_code)]
check_with_bold[is.na(check_with_bold)] <- ""  # for easier matching
check_with_bold <- dplyr::mutate(check_with_bold, 
                               max_sim_bold = tfill$max_sim_bold[match(check_with_bold$asv_code, tfill$asv_code)],
                               max_p_identity = tfill$max_p_identity[match(check_with_bold$asv_code, tfill$asv_code)],
                               .after = bold_match)  #16,117

# Check for disagreements between checked_species_name and the name determined by the Appendix 2 script (species)
check_with_bold <- check_with_bold[check_with_bold$species != check_with_bold$checked_species_name,]
# 3778 records where checked_species name doesn't match species,
x <- unique(check_with_bold[c("checked_species_name","species")])
nrow(x) # reduces to 286 name disagreements
# Let's break this up and reduce the list iteratively: please identify any names you think the script has got wrong at each step

# Records where checked_species_name was blank but the script keeps a species name
xa <- x[x$checked_species_name == "" & x$species != "",]
# 25 cases where a low max_sim_bold has been replaced by a high geneious_similarity, for example
check_with_bold[check_with_bold$checked_species_name == "" & check_with_bold$species == "Piona sp. B-AEI7143",]
tfill[tfill$asv_code == "0beb9ec9626ac4c3d5b215d0ece3bba2",]
# MEL: Are you happy with that? (see L1099 of Appendix_2_clean_cw)

# Records where the script removes a species name where check_species_name says there should be one
xb <- x[x$checked_species_name != "" & x$species == "",]
# 134 cases where maximum bold match was less than max_p_identity and replaced it at L1166  of Appendix_2_clean_cw
check_with_bold[check_with_bold$checked_species_name == "Stratiomyidae sp. B-AED3167" & check_with_bold$species == "",]
tfill[tfill$asv_code == "5e54eb4fe2cfe6a15ed1b5c718f348f6",]
max(match_list_bin_uri$`5e54eb4fe2cfe6a15ed1b5c718f348f6`$similarity)
# MEL Are you happy with that?

x <- x[!(x$checked_species_name == "" | x$species == ""),] # down to 127

# Groups MEL has lumped that the script identified as distinct
# Note you were happy with x1, x2, x3 and x4 last time
x1 <- x[duplicated(x$checked_species_name) | duplicated(x$checked_species_name, fromLast = TRUE),]
# Groups that the script lumped and MEL had as separate
x2 <- x[duplicated(x$species) | duplicated(x$species, fromLast = TRUE),]
# Remove these to get
x <- x[!x$species %in% unique(c(x2$species, x1$species)),]
# We would expect that there will be disagreement in B- names (the script always chooses the first bin alphabetically and adds the name group)
x3 <- x[grepl("B-", x$species) & grepl("group", x$species) & grepl("B-", x$checked_species_name),]
x <- x[!x$species %in% x3$species,]
nrow(x) # reduced to 32
# disagreements are a result of Mel's "update species name" not being made
mel_changes <- unique(check_with_bold$checked_species_name[grep("species name",check_with_bold$action)])
x4 <- x[x$checked_species_name %in% mel_changes,]
# Remove these to get 
x <- x[!x$species %in% x4$species,]
nrow(x)
x
# reduced to 15, # MEL: you might want to do a final re-check of x

```

